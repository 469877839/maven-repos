<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.2.RELEASE</version>
	</parent>
	<groupId>ifp</groupId>
	<artifactId>ifp-boot-parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>${project.artifactId}</name>
	<packaging>pom</packaging>

	<properties>
		<ifp.version>3.0.0-SNAPSHOT</ifp.version>
		<environment>dev</environment>
		<start-class>com.ifp.App</start-class>
		<webroot.directory>WebContent</webroot.directory>
		<spring-boot.content.root>static</spring-boot.content.root>
		<profile.directory>src/main/config/${environment}</profile.directory>
		<docker.image.prefix>ynet</docker.image.prefix>
		<docker.registry.host>docker-registry.ynet.io</docker.registry.host>
		<docker.registryUrl>http://${docker.registry.host}:5000</docker.registryUrl>
		<docker.dockerHost>http://${docker.registry.host}:2375</docker.dockerHost>
		<docker.pushImage>false</docker.pushImage>
		<docker.serverId>docker-ynet</docker.serverId>
	</properties>

	<profiles>
		<!-- product配置 -->
		<profile>
			<id>prod</id>
			<properties>
				<environment>prod</environment>
			</properties>
		</profile>
		<!-- test配置 -->
		<profile>
			<id>test</id>
			<properties>
				<environment>test</environment>
			</properties>
		</profile>
		<!-- dev配置 -->
		<profile>
			<id>dev</id>
			<properties>
				<environment>dev</environment>
			</properties>
		</profile>
	</profiles>

	<distributionManagement>
		<repository>
			<id>ynet.releases</id>
			<name>Nexus Release Repository</name>
			<url>http://192.168.1.99:8181/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>ynet.snapshots</id>
			<name>Nexus Snapshot Repository</name>
			<url>http://192.168.1.99:8181/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5</version>
				<scope>provided</scope>
			</dependency>

			<!-- dubbo -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbov</artifactId>
				<version>2.8.4</version>
				<exclusions>
					<exclusion>
						<groupId>javax.servlet</groupId>
						<artifactId>javax.servlet-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- ifp2.0 -->
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp</artifactId>
				<version>${ifp.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>pull-parser</artifactId>
						<groupId>pull-parser</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-test</artifactId>
				<version>0.0.1-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-access</artifactId>
				<version>0.0.1-SNAPSHOT</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-flume</artifactId>
				<version>0.0.1-SNAPSHOT</version>
				<exclusions>
					<exclusion>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>servlet-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-mq</artifactId>
				<version>0.0.1-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-aliyun</artifactId>
				<version>0.0.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-antcloud</artifactId>
				<version>0.0.1-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>ifp</groupId>
				<artifactId>ifp-boot</artifactId>
				<version>0.0.1-SNAPSHOT</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>log4j-over-slf4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ifp</groupId>
			<artifactId>ifp</artifactId>
		</dependency>
		<dependency>
			<groupId>ifp</groupId>
			<artifactId>ifp-boot</artifactId>
		</dependency>
	</dependencies>

	<build>
		<!-- Turn on filtering by default for application properties -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/application*.yml</include>
					<include>**/application*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/application*.yml</exclude>
					<exclude>**/application*.properties</exclude>
				</excludes>
			</resource>

			<!-- 当项目需要加载lib下面的jar时，需要添加下面的配置 -->
			<!-- <resource>
				<directory>${webroot.directory}</directory>
				<excludes>
					<exclude>WEB-INF/classes/**</exclude>
					<exclude>WEB-INF/lib/**</exclude>
					<exclude>WEB-INF/web.xml</exclude>
				</excludes>
				<filtering>true</filtering>
				<targetPath>${spring-boot.content.root}</targetPath>
			</resource>
			 -->

			<!-- 简单的替换配置文件，但功能不够强大，因此用maven-resources-plugin代替 -->
			<!-- <resource>
				<directory>src/main/config/${environment}</directory>
				<filtering>true</filtering>
				<targetPath>${spring-boot.content.root}/WEB-INF</targetPath>
			</resource> -->
		</resources>
		<pluginManagement>
			<plugins>
				<!-- <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<compilerArguments>
							<extdirs>${basedir}/${webroot.directory}/WEB-INF/lib</extdirs>
						</compilerArguments>
					</configuration>
				</plugin> -->

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<executions>
						<execution>
							<id>copy-resources</id>
							<!-- 在default生命周期的 compile阶段就执行resources插件的copy-resources目标 -->
							<phase>compile</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<!-- 指定resources插件处理资源文件到哪个目录下 -->
								<outputDirectory>target/classes/${spring-boot.content.root}</outputDirectory>
								<!-- 待处理的资源定义 -->
								<resources>
									<resource>
										<!-- 指定resources插件处理哪个目录下的资源文件 -->
										<directory>${webroot.directory}</directory>
										<!-- 指定不需要处理的资源 -->
										<excludes>
											<exclude>WEB-INF/classes/**</exclude>
											<exclude>WEB-INF/lib/**</exclude>
											<exclude>WEB-INF/web.xml</exclude>
										</excludes>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>compile</id>
							<phase>compile</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>target/classes/${spring-boot.content.root}/WEB-INF</outputDirectory>
								<resources>
									<resource>
										<directory>${profile.directory}</directory>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>docker:build</id>
							<phase>compile</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/docker</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/docker</directory>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- 使用方法: bl:compile，但已默认绑定到maven的compile生命周期，只要在plugins中添加，就不需要手动触发 -->
				<plugin>
					<groupId>ifp.ide</groupId>
					<artifactId>bl-maven-plugin</artifactId>
					<version>0.0.1-SNAPSHOT</version>
					<executions>
						<execution>
							<id>bl-compile</id>
							<phase>compile</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- 使用方法: war:war -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<archive>
							<manifest>
								<mainClass>${start-class}</mainClass>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							</manifest>
						</archive>

						<encoding>UTF-8</encoding>
						<warSourceDirectory>${webroot.directory}</warSourceDirectory>
						<webXml>${webroot.directory}/WEB-INF/web.xml</webXml>
						<packagingExcludes>
							WEB-INF/classes/${spring-boot.content.root}/**,
							WEB-INF/classes/BOOT-INF/**,
							WEB-INF/classes/application.properties,
							WEB-INF/classes/com/ifp/App.class,
							WEB-INF/classes/com/ifp/boot/**
							WEB-INF/lib/ifp-boot-*.jar,
							WEB-INF/lib/spring-boot-*.jar
						</packagingExcludes>

						<!-- 要替换的war配置文件，主要是加载文件的路径不同 -->
						<webResources>
							<resource>
								<filtering>true</filtering>
								<directory>${profile.directory}</directory>
								<targetPath>WEB-INF</targetPath>
							</resource>
						</webResources>
					</configuration>
				</plugin>

				<!-- 使用方法: docker:build -->
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.4.13</version>
					<configuration>
						<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
						<dockerDirectory>target/docker</dockerDirectory>
						<serverId>${docker.serverId}</serverId>
						<registryUrl>${docker.registryUrl}</registryUrl>
						<dockerHost>${docker.dockerHost}</dockerHost>
						<pushImage>${docker.pushImage}</pushImage>
						<resources>
							<resource>
								<targetPath>/</targetPath>
								<directory>${project.build.directory}</directory>
								<include>${project.build.finalName}.jar</include>
							</resource>
							<resource>
								<targetPath>/</targetPath>
								<directory>src/main/resources</directory>
								<include>application.properties</include>
							</resource>
						</resources>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- <plugin>
				<groupId>ifp.ide</groupId>
				<artifactId>bl-maven-plugin</artifactId>
			</plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
